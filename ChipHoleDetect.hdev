<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,1]" as_ord="1">read_image (Image, '/Users/Shared/Library/Application Support/HALCON-22.05-Progress/examples/images/mine/chipHoleDetect.png')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<c></c>
<l>dev_display (Image)</l>
<c></c>
<l>rgb1_to_gray (Image, GrayImage)</l>
<c>********找到目标区域********</c>
<l>threshold (GrayImage, Regions, 173, 255)</l>
<l>fill_up (Regions, RegionFillUp)</l>
<l>closing_circle (RegionFillUp, RegionClosing, 5.5)</l>
<l>opening_circle (RegionClosing, RegionOpening, 2.5)</l>
<l>fill_up (RegionOpening, RegionFillUp1)</l>
<l>connection (RegionFillUp1, ConnectedRegions)</l>
<l>opening_circle (ConnectedRegions, RegionOpening1, 3.5)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 59218.8, 80156.2)</l>
<l>* count_obj (SelectedRegions, Number)</l>
<l>* smallest_rectangle2 (SelectedRegions, Row, Column, Phi, Length1, Length2)</l>
<l>smallest_rectangle2 (SelectedRegions, Row, Column, Phi, Length1, Length2)</l>
<l>gen_rectangle2 (Rectangle, Row, Column, Phi, Length1, Length2)</l>
<c></c>
<c></c>
<c>******* 先把图像方向调整正********</c>
<l>vector_angle_to_rigid (Row, Column, Phi, Row, Column, 0, HomMat2D)</l>
<l>affine_trans_region (Rectangle, RegionAffineTrans, HomMat2D, 'nearest_neighbor')</l>
<l>affine_trans_image (GrayImage, ImageAffineTrans, HomMat2D, 'constant', 'false')</l>
<l>reduce_domain (ImageAffineTrans, RegionAffineTrans, ImageReduced)</l>
<l>crop_domain (ImageReduced, ImagePart)</l>
<l>* threshold (ImagePart, Regions1, 181, 255)</l>
<l>* closing_circle (Regions1, RegionClosing1, 3.5)</l>
<l>* fill_up (RegionClosing1, RegionFillUp2)</l>
<l>* connection (RegionFillUp2, ConnectedRegions1)</l>
<l>* smallest_rectangle2 (ConnectedRegions1, Row1, Column1, Phi1, Length11, Length21)</l>
<l>* gen_rectangle2 (Rectangle1, Row1, Column1, Phi1, Length11, Length21)</l>
<c></c>
<c></c>
<c></c>
<l>threshold (ImagePart, Regions1, 166, 255)</l>
<l>fill_up (Regions1, RegionFillUp2)</l>
<l>opening_circle (RegionFillUp2, RegionOpening2, 3.5)</l>
<l>connection (RegionOpening2, ConnectedRegions1)</l>
<l>sort_region (ConnectedRegions1, SortedRegions, 'character', 'true', 'row')</l>
<l>smallest_circle (ConnectedRegions1, RowRegions, ColumnRegions, RadiusRegions)</l>
<l>count_obj (SortedRegions, Number1)</l>
<c></c>
<c></c>
<c>****  计算有多少行  *****</c>
<l>dilation_rectangle1 (SortedRegions, RegionDilationRow, 20, 1)</l>
<l>erosion_rectangle1 (RegionDilationRow, RegionErosionRow, 1, 5)</l>
<l>union1 (RegionErosionRow, RegionUnionRow)</l>
<l>connection (RegionUnionRow, ConnectedRegionsRow)</l>
<l>count_obj (ConnectedRegionsRow, NumberRow)</l>
<c></c>
<c>****  计算有多少列  *****</c>
<c></c>
<l>dilation_rectangle1 (SortedRegions, RegionDilationCol, 1, 20)</l>
<l>erosion_rectangle1 (RegionDilationCol, RegionErosionCol, 5, 1)</l>
<l>union1 (RegionErosionCol, RegionUnionCol)</l>
<l>connection (RegionUnionCol, ConnectedRegionsCol)</l>
<l>count_obj (ConnectedRegionsCol, NumberCol)</l>
<c></c>
<c></c>
<c>****** 计算相邻圆点的距离 *******</c>
<l>select_obj (SortedRegions, ObjectSelected1, 1)</l>
<l>select_obj (SortedRegions, ObjectSelected2, 2)</l>
<l>select_obj (SortedRegions, ObjectSelected3, NumberCol+1)</l>
<c></c>
<l> area_center (ObjectSelected1, Area1, Row1, Column1)</l>
<l> area_center (ObjectSelected2, Area2, Row2, Column2)</l>
<l> area_center (ObjectSelected3, Area3, Row3, Column3)</l>
<l> smallest_circle (ObjectSelected1, RowSelected1, ColumnSelected1, Radius)</l>
<l>* smallest_circle (ObjectSelected2, Row2, Column2, Radius1)</l>
<l>* smallest_circle (ObjectSelected3, Row3, Column3, Radius2)</l>
<c>*横向相邻两个圆的圆心距离</c>
<l>distanceCol := Column2 - Column1</l>
<c>*纵向相邻圆点距离</c>
<l>distanceRow := Row3 - Row1</l>
<l>distanceUpDown:= Column1 - Column3</l>
<c></c>
<l>get_image_size (ImagePart, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle)</l>
<l>dev_display (ImagePart)</l>
<c></c>
<l>* set_display_font (WindowHandle, 6, 'mono', 'true', 'false')</l>
<l>* dump_window (WindowHandle, 'postscript', 'halcon_dump')</l>
<l>* for Index := 1 to Number1 by 1</l>
<l>*      select_obj (SortedRegions, CurrentRect, Index)</l>
<l>*      dev_display (CurrentRect)</l>
<l>*      area_center (CurrentRect, Area, Row, Column)</l>
<l>*      disp_message (WindowHandle, ' ' + Index, 'image', Row - 8, Column - 5, 'white', 'false') </l>
<l>* endfor</l>
<c></c>
<c>******  按照圆点排列位置生成圆形区域，找出和实际图像中的圆点是否有交叉区域  *******</c>
<l>* for Index := 0 to NumberRow-1 by 1</l>
<l>*     for Index1 := 0 to NumberCol-1 by 1</l>
<l>*         circleRow := Row1 + Index * distanceRow</l>
<l>*          circleCol:= Column1 - distanceUpDown * Index1 + Index1*distanceCol</l>
<l>*         circleCol:= Column1 + Index1*distanceCol</l>
<c></c>
<l>*         gen_circle (Circle, circleRow,circleCol , Radius)</l>
<c>        </c>
<l>*     endfor</l>
<l>* endfor</l>
<c></c>
<l>NGCount:=0</l>
<l>realIndex := 0</l>
<l>needAddNGCount := false</l>
<l>for IndexRow := 1 to NumberRow by 1</l>
<l>     realIndex := realIndex + 1</l>
<l>     for IndexCol := 1 to NumberCol-1 by 1</l>
<l>        selectIndex := (IndexRow - 1) * NumberCol + IndexCol - NGCount</l>
<l>        if (needAddNGCount)</l>
<l>           NGCount:=NGCount+1 </l>
<l>           needAddNGCount := false</l>
<l>        endif</l>
<l>*         realIndex := realIndex + 1</l>
<l>        select_obj (SortedRegions, ObjectSelected, selectIndex)</l>
<l>        select_obj (SortedRegions, ObjectSelectedNext, selectIndex + 1)</l>
<l>        realIndex := realIndex + 1</l>
<l>        area_center (ObjectSelected, Area, RowSelected, ColumnSelected)</l>
<l>        area_center (ObjectSelectedNext, Area4, RowSelectedNext, ColumnSelectedNext)</l>
<l>        distanceColSelect := ColumnSelectedNext - ColumnSelected</l>
<l>        distanceRowSelect := RowSelectedNext - RowSelected</l>
<l>        if (distanceColSelect &gt; distanceCol + 10)</l>
<l>           disp_message (WindowHandle, 'NG', 'image', RowSelected, ColumnSelected , 'black', 'true') </l>
<l>*            NGCount:=NGCount+1</l>
<l>           needAddNGCount :=true</l>
<l>        endif</l>
<c>        </c>
<l>        isDistanceRowOver := distanceRowSelect &gt; 5</l>
<l>        isRowTail := realIndex % NumberCol = 0</l>
<l>        if (isDistanceRowOver and isRowTail)</l>
<l>           disp_message (WindowHandle, 'NG', 'image', RowSelected, ColumnSelected , 'black', 'true') </l>
<l>*            NGCount:=NGCount+1</l>
<l>           needAddNGCount :=true</l>
<l>        endif</l>
<c>        </c>
<l>*         if (IndexCol = NumberCol-1)</l>
<c>            </c>
<c>            </c>
<l>*         endif</l>
<l>     endfor</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
